<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginehForoMensaje extends BaseehForoMensaje
{
  // Niveles de acceso al mensaje
  const NIVEL_ACCESO_NO_AUTORIZADO  = 0;
  const NIVEL_ACCESO_AUTORIZADO     = 1;
  const NIVEL_ACCESO_PROPIETARIO    = 2;
  const NIVEL_ACCESO_MODERADOR      = 3;
  const NIVEL_ACCESO_ADMINISTRADOR  = 4;
  
  protected $nombre_usuario = null;
  
  public function __toString()
  {
    return $this->getAsunto();
  }
  
  public function setNombreUsuario($v)
  {
    $this->nombre_usuario = $v;
  }
  
  public function getPerfil()
  {
    if(isset($this->getUsuario()->Perfil))
    {
      return $this->getUsuario()->getPerfil();
    }
    else
    {
      return null;
    }
  }
  
  public function isAutorAmigo()
  {
    return isset($this->getUsuario()->Invitantes) && $this->getUsuario()->getInvitantes()->getFirst();
  }
  
  /**
   * Comprueba si el usuario está autorizado para realizar operaciones sobre el mensaje según el grado de autorización:
   * 
   *  * Grado 0: No es necesario que esté siquiera autentificado
   *  * Grado 1: Requiere que el usuario esté autentificado
   *  * Grado 2: Requiere que el usuario tenga privilegios de autoría sobre el mensaje
   *  * Grado 3: Requiere que el usuario sea un moderador
   *  * Grado 4+: Requiere que el usuario sea un administrador
   * 
   * @param ehForoSecurityUser $user
   * @param integer $grado
   * @param array $moderadores
   */
  public function estaUsuarioAutorizado(ehForoSecurityUser $user, $grado = 1, $moderadores = array())
  {
    // Si el grado es 0, devolvemos verdadero siempre
    if($grado == ehForoMensaje::NIVEL_ACCESO_NO_AUTORIZADO) return true;
    
    if($user->isAuthenticated())
    {
	    // Se requiere que el usuario esté autentificado
	    if($grado <= ehForoMensaje::NIVEL_ACCESO_AUTORIZADO) return true;
	    
	    // Se requiere que el usuario sea el autor del mensaje
	    if($grado <= ehForoMensaje::NIVEL_ACCESO_PROPIETARIO && $user->getUserId() == $this->getUsuarioId()) return true;
	    
	    // Se requiere que el usuario sea un moderador 
	    if($grado <= ehForoMensaje::NIVEL_ACCESO_MODERADOR && $user->isAdministrador()) return true; // NO IMPLEMENTADO
	    
	    // Se requiere que el usuario sea un administrador
	    if($user->isAdministrador()) return true;
    }
    
    return false;
  }
  
  public function estaUsuarioConectado()
  {   
    return $this->getUsuarioId() ? ($this->getUsuario()->getUsuarioActivo() ? true : false) : null;
  }
  
  public function getPerfilGrupo()
  {
    return $this->getPerfil()->getGrupos()->getFirst();
  }
  
  public function getNick($forzarPerfil = false)
  {
    if($this->getUsuarioId())
    {
      if($forzarPerfil == true || isset($this->getUsuario()->Perfil))
      {
        $perfil = isset($this->getUsuario()->Perfil) ? $this->getUsuario()->Perfil : $this->getUsuario()->getPerfil();
        
        if($perfil->getNick())
        {
          return $perfil->getNick();
        }
        else
        {
          return $this->getUsuario()->getUsername(); 
        }
      }
      else
      {
        return $this->getUsuario()->getUsername();
      }
    }
    else
    {
      if($this->getNombreInvitado())
      {
        return $this->getNombreInvitado();
      }
      else
      {
        return 'Invitado';
      }
    }
  }
  
  /**
   * Devuelve verdadero si el usuario que escribio este mensaje es un invitado
   * 
   * @return boolean True o false
   */
  public function isByInvitado()
  {
    return $this->getUsuarioId() ? false : true;
  }
  
  public function getFechaPublicacion($format = 'd-M-Y H:i:s')
  {
    $dateTime = new DateTime($this->getVisibleDesde() ? $this->getVisibleDesde() : $this->getCreatedAt());
    
    return $dateTime->format($format);
  }
  
  public function hasFirma()
  {
    return $this->getFirma() && (!is_null($this->getUsuarioId())) && $this->getPerfil()->getFirma();
  }
  
  public function getFechaActualizacion($format = 'd-M-Y H:i:s')
  {
    $dateTime = new DateTime($this->getUpdatedAt());
  
    return $dateTime->format($format);
  }
  
  public function preSave($event)
  {
    if(!$this->getVisibleDesde()) $this->setVisibleDesde(date('Y-m-d H:i:s'));
    
    if($this->nombre_usuario)
    {
      if($user = Doctrine::getTable('ehAuthUser')->findOneBy('username', $this->nombre_usuario))
      {
        $this->setUsuarioId($user->getId());
      }
    }
  }
  
  public function preInsert($event)
  {
    if(!$this->getIp())
    {
      try
      {
        $this->setIp(sfContext::getInstance()->getUser()->getIP());
      }
      catch(Exception $e){ /* Excepción */ }
    }
  }
  
  public function postDelete($event)
  {    
    if(!is_null($this->getHiloId()))
    {
      $this->actualizarMensajesUsuario();
      
      $this->getHilo()->setRespuestas($this->getHilo()->getRespuestas()-1);
      $this->getHilo()->searchAndSetMensajes();
      
      Doctrine_Query::create()
        ->update('ehForoTablon')
        ->where('id = ?', $this->getHilo()->getTablonId())
        ->set('num_mensajes', 'num_mensajes - 1')
        ->execute();
    }
  }
  
  public function postInsert($event)
  {
    $this->actualizarHiloTablon();
  }
  
  public function actualizarMensajesUsuario($usuarioId = null)
  {
    $usuarioId = !is_null($usuarioId) ? $usuarioId : $this->getUsuarioId();
    
    // Si no es un invitado
    if($usuarioId)
    {
      Doctrine_Query::create()
        ->update('ehForoPerfil p')
        ->where('p.usuario_id = ?', $this->getUsuarioId())
        ->set('p.num_mensajes', '?', Doctrine_Query::create()->from('ehForoMensaje')->where('usuario_id = ?', $usuarioId)->addWhere('hilo_id IS NOT NULL')->count())
        ->execute();
    }
  }
  
  public function actualizarHiloTablon(array $options = array())
  {
    // Si es un mensaje de un hilo
    if(!is_null($this->getHiloId()))
    {
      $this->actualizarMensajesUsuario();
        
      // Si es la cabecera de un hilo
      if(!$this->getHilo()->getPrimerMensajeId() || $this->getHilo()->getPrimerMensajeId() == $this->getId())
      {
        $this->getHilo()->setPrimerMensaje($this);
      }
      // Si NO es la cabecera de un hilo
      else
      {
        $this->getHilo()->setRespuestas($this->getHilo()->getRespuestas()+1);
        
        Doctrine_Query::create()->update('ehForoTablon')
          ->where('id = ?', $this->getHilo()->getTablonId())
          ->set('ultimo_hilo_id', $this->getHiloId())
          ->set('num_mensajes', 'num_mensajes + 1')
          ->execute();
      }
      
      $this->getHilo()->setUltimoMensaje($this);
      $this->getHilo()->save();
    }
  }
}