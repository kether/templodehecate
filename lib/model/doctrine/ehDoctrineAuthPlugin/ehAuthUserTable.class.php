<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ehAuthUserTable extends PluginehAuthUserTable
{
  public function retrieveBackendList(Doctrine_Query $q)
  {
    return $q->innerJoin($q->getRootAlias().'.Perfil p');
  }
  
  public function retrievePeticionesGrupoList()
  {
    return $this->createQuery('u')
      ->innerJoin('u.Perfil')
      ->innerJoin('u.PeticionGrupo pg')
      ->orderBy('pg.created_at DESC')
      ->execute();
  }
  
  /**
   * Devuelve un usuario y su perfil si está activo
   * 
   * @param string $username
   * @return ehAuthUser
   */
  public function retrieveOneJoinPerfilByUsername($username)
  {
    return $this->createQuery('u')
      ->innerJoin('u.Perfil p')
      ->addWhere('u.username = ?', $username)
      ->addWhere('u.is_active = ?', true)
      ->fetchOne();
  }
  
  public function retrieveAmigosByUsuarioId($usuarioId, $limit = null)
  {
    $q = $this->createQuery('u')
      ->innerJoin('u.Perfil p')
      ->innerJoin('u.Invitantes i')
      ->addWhere('i.invitante_id = ?', $usuarioId);
    
    if(!is_null($limit))
    {
      $q->limit($limit);
    }
    
    return $q->execute();
  }
  
  /**
   * Busca todos los usuarios colaboradores en función de la sección.
   * 
   * @param mixed $seccion Un número entero con el ID de la sección o una cadena con el nombre de la sección
   * @return Doctrine_Collection Una colección de registros ehAuthUser
   */
  public function retrieveColaboradoresBySeccion($seccion)
  {
    $q = $this->createQuery('u')->innerJoin('u.Perfil p');
    
    if(is_numeric($seccion))
    {
      $q->innerJoin('u.Credentials c WITH c.name = (SELECT s.slug FROM tdhSeccion s WHERE s.id = ?)', $seccion);
    }
    else
    {
      $q->innerJoin('u.Credentials c WITH c.name = ?', $seccion);
    }
    
    return $q->execute();
  }
  
  /**
   * Busca un usuario por el servicio y el UID del servicio.
   * 
   * @param string $uid 
   * @param string $service Opción entre 'google', 'twitter' y 'facebook'.
   * @return ehAuthUser
   */
  public function retrieveOneByUidAndService($uid, $service = 'google')
  {
    return $this->createQuery('u')
      ->innerJoin('u.Perfil p')
      ->innerJoin('u.Autentificaciones a WITH a.servicio = ?', $service)
      ->addWhere('a.uid = ?', $uid)
      ->fetchOne();
  }
}