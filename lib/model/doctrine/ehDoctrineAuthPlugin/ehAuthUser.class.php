<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ehAuthUser extends PluginehAuthUser
{
  protected $misRecursosFavoritos = null;
  
  protected $misSeccionesFavoritas = null;
  
  protected $miActividad = null;
  
  protected $misAmigos = null;
  
  protected $conectores = null;
  
  public function getNick()
  {
    if($this->getPerfil())
    {
      return $this->getPerfil()->getNick() ? $this->getPerfil()->getNick() : $this->getUsername();
    }
    else
    {
      return $this->getUsername();
    }
  }
  
  /**
   * Devuelve los recursos (ayudas, módulos, ...) en una colección de favoritos del usuario.
   * 
   * @param integer $limite
   * @return Doctrine_Collection
   */
  public function getMisRecursosFavoritos()
  {
    if(!$this->misRecursosFavoritos)
    {
      $this->misRecursosFavoritos = Doctrine::getTable('tdhRecurso')->getAutorizados(tdhConfig::get('num_recursos_perfil', 10), array('perfil' => $this->getUsername()));
    }
    
    return $this->misRecursosFavoritos;
  }
  
  public function getMisSeccionesFavoritas()
  {
    if(!$this->misSeccionesFavoritas)
    {
      $this->misSeccionesFavoritas = Doctrine::getTable('tdhSeccion')->retrieveFavoritasByUserId($this->getId());
    }
    
    return $this->misSeccionesFavoritas;
  }
  
  /**
   * Devuelve la actividad de un usuario en los foros, reseñas, críticas, etc.
   * 
   * @return DoctrineCollection
   */
  public function getMiActividad()
  {
    return $this->miActividad ? $this->miActividad : $this->miActividad = Doctrine::getTable('ehForoHilo')->retrieveActividadPerfil($this->getId());
  }
  
  public function getMisAmigos()
  {
    return $this->misAmigos ? $this->misAmigos : $this->misAmigos = Doctrine::getTable('ehAuthUser')->retrieveAmigosByUsuarioId($this->getId(), tdhConfig::get('num_amigos_perfil', 5));
  }
    
  public function getConector($servicio = 'twitter')
  {
    if(!$this->conectores)
    {
      $auths = Doctrine::getTable('tdhOauth')->findByUsuarioId($this->getId());
      
      foreach($auths as $auth)
      {
        switch($auth->getServicio())
        {
          case 'twitter':
            $this->conectores[$auth->getServicio()] = new ehUtilesTwitter(array('access_token' => $auth->getToken(), 'access_token_secret' => $auth->getTokenSecret()));
            break;
        }
         
      }
    }
    
    return $this->conectores[$servicio = 'twitter'];
  } 
}