<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ehForoHiloTable extends PluginehForoHiloTable
{  
  /**
   * @see PluginehForoHiloTable::retrieveAutorizadoPorId()
   */
  public function retrieveAutorizadoPorId($id, $usuarioId = null, $selectMinimo = false)
  {
    $q = $this->autorizados();
    $this->setQueryJoinContenido($q);
    $q->addWhere('h.id = ?', $id);
    
    if($selectMinimo)
    {
      self::setQuerySelectMinimo($q);
      $q->addSelect('rec.id, rec.tiene_html, rec.conver_pdf, rec.conver_epub, rec.entradilla, secr.id, secr.slug, tipr.id, tipr.es_juego')
        ->addSelect('eve.id')
        ->addSelect('cri.id, secc.id, secc.slug, tipc.id, tipc.es_juego')
        ->addSelect('not.id, secn.id, secn.slug, tipn.id, tipn.es_juego');
    }
  
    if(!is_null($usuarioId))
    {
      self::setQueryLeido($q, $usuarioId, $selectMinimo);
    }
  
    return $q->fetchOne();
  }
  
  /**
   * @see PluginehForoHiloTable::retrieveDesautorizadoPorId()
   */
  public function retrievePorId($id)
  {
    $q = $this->todos();
    return $q->addWhere('h.id = ?', $id)->fetchOne();
  }
  
  public function setQueryJoinContenido(Doctrine_Query $q)
  {
    return $q
      ->leftJoin('h.Recurso rec')
        ->leftJoin('rec.Seccion secr')
        ->leftJoin('secr.Tipo tipr')
      ->leftJoin('h.Evento eve')
      ->leftJoin('h.Critica cri')
        ->leftJoin('cri.Seccion secc')
        ->leftJoin('secc.Tipo tipc')
      ->leftJoin('h.Noticia not')
        ->leftJoin('not.Seccion secn')
        ->leftJoin('secn.Tipo tipn');
  }
  
  public function prepareQueryForContenido(Doctrine_Query $q)
  {
    $rootAlias = $q->getRootAlias();
    
    return $q
      ->innerJoin($rootAlias.'.PrimerMensaje pm');
  }
  
  /**
   * Devuelve para el backend el listado de noticias relacionado con su primer mensaje y la tabla de noticias.
   * 
   * @param Doctrine_Query $q
   * @return Doctrine_Query $q El query modificado
   */
  public function retrieveBackendNoticia(Doctrine_Query $q)
  {
    $rootAlias = $q->getRootAlias();
    
    return $this
      ->prepareQueryForContenido($q)
      ->innerJoin($rootAlias.'.Noticia n')
      ->innerJoin('n.Seccion s');
  }
  
  /**
  * Devuelve para el backend el listado de artículos relacionado con su primer mensaje y la tabla de artículos.
  *
  * @param Doctrine_Query $q
  * @return Doctrine_Query $q El query modificado
  */
  public function retrieveBackendArticulo(Doctrine_Query $q)
  {
    $rootAlias = $q->getRootAlias();
  
    return $this
      ->prepareQueryForContenido($q)
      ->innerJoin($rootAlias.'.Articulo ar');
  }
  
  /**
   * Devuelve para el backend el listado de recursos relacionado con su primer mensaje y la tabla de recursos.
   * 
   * @param Doctrine_Query $q
   * @return Doctrine_Query $q El query modificado
   */
  public function retrieveBackendRecurso(Doctrine_Query $q)
  {
    $rootAlias = $q->getRootAlias();
    
    return $this
      ->prepareQueryForContenido($q)
      ->innerJoin($rootAlias.'.Recurso re')
      ->innerJoin('re.Seccion s');
  }
  
  /**
   * Devuelve para el backend el listado de críticas relacionado con su primer mensaje y la tabla de críticas.
   * 
   * @param Doctrine_Query $q
   * @return Doctrine_Query $q El query modificado
   */
  public function retrieveBackendCritica(Doctrine_Query $q)
  {
    $rootAlias = $q->getRootAlias();
    
    return $this
      ->prepareQueryForContenido($q)
      ->innerJoin($rootAlias.'.Critica c')
      ->leftJoin($rootAlias.'.Noticia n')
      ->innerJoin('c.Seccion s');
  }
  
  /**
   * Devuelve para el backend el listado de eventos relacionado con su primer mensaje y la tabla de eventos.
   * 
   * @param Doctrine_Query $q
   * @return Doctrine_Query $q El query modificado
   */
  public function retrieveBackendEvento(Doctrine_Query $q)
  {
    $rootAlias = $q->getRootAlias();
    
    return $this
      ->prepareQueryForContenido($q)
      ->innerJoin($rootAlias.'.Evento e');
  }
  
  public function retrieveActividadPerfil($usuarioId)
  {
    $q = $this->autorizados()
              ->limit(tdhConfig::get('num_actividad_perfil', 15))
              ->addOrderBy('um.visible_desde DESC, um.created_at DESC, um.id DESC')
              ->addWhere('um.usuario_id = ?', $usuarioId);
    
    self::setQuerySelectMinimo($q);
    return $q->execute();
  }
}